// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Category {
  RENT
  SALE
  SHORTLET
}



model Notification {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("notifications")

}

model User{
  id     String @id @default(cuid())
  name   String 
  role   ROLE @default(USER)
  email  String @unique
  hashedPassword String
  refreshToken String?
  properties Property[]
  bookings Booking[]
  notifications Notification[]
  verified   Boolean @default(false)

  @@map("users")
}

model Booking {
  id         String    @id @default(cuid())
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  user       User      @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId     String
  startDate  DateTime?
  endDate    DateTime?
  status     STATUS @default(PENDING)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("bookings")
  @@unique([propertyId, startDate])
}

enum ROLE {
  ADMIN
  USER

}

enum STATUS {
  PENDING
  APPROVED
  DECLINED

}

model Property{
  id     String @id @default(cuid())
  name   String 
  details String[]
  price   Float
  datesBooked DateTime[] @default([])
  isBooked Boolean @default(false)
  isAvailable Boolean @default(true)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
  cautionFee Float @default(0)
  agencyFee  Float @default(0)
  legalFee   Float @default(0)
  bookings   Booking[]
  category   Category
  user User @relation(fields: [ownerId], references: [id])
  ownerId   String
  imageUrls String[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([locationId])
  @@index([ownerId])
  @@index([category])

  @@map("properties")
}

model Location {
  id     String @id @default(cuid()) 
  address String
  city    String
  state   String
  country String
  properties Property[]


  @@index([address, city, state])
  @@map("locations")
}